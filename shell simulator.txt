//Hugh Ashley
//EEL5733
//Shell Simulator class work


print("$");

while(strlen(input)>0){


	///////////////////////////////
	/*******TOKENIZE INPUT********/
	///////////////////////////////



	//file descriptor for file read/writes
	int fd1;
	//file descriptor for pipe
	int fd[2];
	//create pipe
	pipe(fd);
	//declare pid variables
	pid_t pid;
	pid_t child_pid;
	//fork to split into child process and shell process
	pid = fork();
	//child process
	if (pid == 0){
		//write stdout to file
		if (strcmp(modifier_token, ">") == 0){
			fd1 = open(file, flags);
			if (fd1 != STDOUT_FILENO){
			dup2(fd1, STDOUT_FILENO);
			close(fd1);
			execlp(prog, args, char*(NULL));
			_exit(EXIT_SUCCESS)
			}
		//write file to stdin
		}else if(strcmp(modifier_token, "<") == 0){
			fd1 = open(file, flags);
			if (fd1 != STDIN_FILENO){
			dup2(fd1, STDIN_FILENO);
			close(fd1);
			execlp(prog, args, char*(NULL));
			_exit(EXIT_SUCCESS);
			}
		//pipe stdout to stdin
		}else if(strlen(modifier_token) == 1 && strcmp(modifier_token, "|") == 0){
			//fork then pipe
			child_pid = fork();
			if (child_pid == 0){
				dup2(fd[0], STDIN_FILENO);
				close(fd[0]);
				execlp(prog2, args2, char*(NULL));
				_exit(EXIT_SUCCESS);

			}else if (child_pid > 0){
				dup2(fd[1], STDOUT_FILENO);
				close(fd[1]);
				execlp(prog1, args1, char*(NULL));
				wait(NULL);
				exit(EXIT_SUCCESS);
			}
		//sequential processes
		}else if(strcmp(modifier_token, ";") == 0){
			//fork into two processes
			child_pid = fork();
			if (pid == 0){
				//execute program 1
				execlp(prog1, args1, char*(NULL));
				_exit(EXIT_SUCCESS);

			}else if (child_pid > 0){
				//wait for child to finish then run
				wait(NULL);
				execlp(prog2, args2, char*(NULL));
				exit(EXIT_SUCCESS);
			}
		//conditional and
		}else if(strcmp(modifier_token, "&&") == 0){
			//if first program correctly executes run other program
			child_pid = fork();
			if (pid == 0){
				//execute program 1
				execlp(prog1, args1, char*(NULL));
				_exit(EXIT_SUCCESS);

			}else if (child_pid > 0){
				//wait for child to finish then run
				if (waitpid(child_pid, &status, 0) == 0){
					execlp(prog2, args2, char*(NULL));
				}
				exit(EXIT_SUCCESS);
			}
		//conditional or
		}else if(strcmp(modifier_token, "||") == 0){
			//if exec returns error run other program
			child_pid = fork();
			if (pid == 0){
				//execute program 1
				execlp(prog1, args1, char*(NULL));
				_exit(EXIT_SUCCESS);

			}else if (child_pid > 0){
				//wait for child to finish then run
				if (waitpid(child_pid, &status, 0) == -1){
					execlp(prog2, args2, char*(NULL));
				}
				exit(EXIT_SUCCESS);
			}
		};


	else if (pid > 0){

		wait(NULL);

		print($);

	}
	

}end while;